<range> {num} {SQBC,BC}
<iterativeStmt> {FOR, WHILE}
<defalut> {DEFAULT, e} {END}
<value> {NUM, TRUE, FALSE}
<caseStmt> {CASE,e} {DEFAULT,END}
<conditionalStmt> {SWITCH} 
<declareStmt> {DECLARE}

<logicalOP> {AND, OR} {PLUS, MINUS, BO, ID, NUM, RNUM, TRUE, FALSE}
<relationalOp> {LT, LE, GT, GE, EQ, NE} {PLUS, MINUS, BO, ID, NUM, RNUM}
<addop> {PLUS, MINUS} {BO, ID, NUM, RNUM}
<mulop> {MUL, DIV} {BO, ID, RNUM, NUM}
<factor> {BO, ID, RNUM, NUM} {MUL, DIV, PLUS, MINUS,BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<_term> {MUL, DIV, e} {PLUS, MINUS,BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<term> {BO, ID, NUM, RNUM} {PLUS, MINUS,BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<_arithmeticExpr> {PLUS, MINUS, e} {BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<arithmeticExpr> {PLUS, MINUS, BO, ID, NUM, RNUM} {BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<_relationalExpression> {LT, LE, GT, GE, EQ, NE, e} {AND,OR,SEMICOL,BC}
<relationalExpression> {PLUS, MINUS, BO, ID, NUM, RNUM, TRUE, FALSE} {AND,OR,SEMICOL,BC}
<_expression> {AND, OR, e} {SEMICOL,BC}
<expression> {SEMICOL,BC}

<_idList> {comma,e} {SEMICOL, SQBC, COLON}
<idlist> {ID} {SEMICOL, SQBC, COLON}

<optional> {SQB0, e} {USE}
<moduleReuseStmt> {SQBO, USE}
<index> {NUM, ID}
<lvalueARRStmt> {SQBO}
<lvalueIDStmt> {ASSIGNOP}
<whichStmt> {ASSIGNOP,SQBO}
<assignmentStmt> {ID}
<simpleStmt> {ID,SQBO,USE}
<printable> {ID,NUM,RNUM,TRUE,FALSE}
<whichId> {SQBO,e} {MUL, DIV, PLUS, MINUS,BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<var> {ID,NUM, RNUM} {MUL, DIV, PLUS, MINUS,BC,LT, LE, GT, GE, EQ, NE, AND, OR, SEMICOL,BC}
<ioStmt> {GET_VALUE, PRINT}
<statement> {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE}
<statements> {GET_VALUE, PRINT, ID, SQBO, USE, DECLARE, SWITCH, FOR, WHILE, e} {END,BREAK}
<moduleDef> {START}
<type> {INT, REAL, BOOLEAN}
<dataType> {INT, REAL, BOOLEAN, ARRAY} 
<_output_plist> {COMMA, e} {SQBC}
<output_plist> {ID} {SQBC}
<_input_plist> {COMMA, e} {SQBC}
<input_plist> {ID} {SQBC}
<ret> {RETURNS, e} {START}
<module> {DEF}
<driverModule> {DRIVERDEF}
<otherModules> {DEF, e} {DRIVERDEF,EOF}
<moduleDeclaration> {DECLARE}
<moduleDeclarations> {DECLARE, e} {DEF,DRIVERDEF}
<program> {DRIVERDEF,DECLARE,DEF,e} {EOF}