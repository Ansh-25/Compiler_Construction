Nikhil
<program> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> <moduleDeclaration> <moduleDeclarations>
<moduleDeclarations> EPS
<moduleDeclaration> DECLARE MODULE ID SEMICOL
<otherModules> <module> <otherModules>
<otherModules> EPS
<driverModule> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> EPS
<input_plist> ID COLON <dataType> <_input_plist>
<_input_plist> COMMA ID COLON <dataType> <_input_plist>
<_input_plist> EPS
<output_plist> ID COLON <_type> <_output_plist>
<_output_plist> COMMA ID COLON <_type> <_output_plist>
<_output_plist> EPS
<dataType> INTEGER
<dataType> REAL
<dataType> BOOLEAN
<dataType> ARRAY SQBO <range_arrays> SQBC OF <_type>
<range_arrays> <index_arr> RANGEOP <index_arr>
<_type> INTEGER
<_type> REAL
<_type> BOOLEAN
<moduleDef> START <statements> END
<statements> <statement> <statements>
<statements> EPS
<statement> <ioStmt>
<statement> <simpleStmt>
<statement> <declareStmt>
<statement> <conditionalStmt>
<statement> <iterativeStmt>

Toshit
<ioStmt> GET_VALUE BO ID BC SEMICOL
<ioStmt> PRINT BO <var_print> BC SEMICOL
<var_print> ID <P1>
<var_print> NUM
<var_print> RNUM
<var_print> <boolConstt>
<boolConstt> TRUE
<boolConstt> FALSE
<P1> SQBO <index_arr> SQBC
<P1> EPS
<simpleStmt> <assignmentStmt>
<simpleStmt> <moduleReuseStmt>
<assignmentStmt> ID <whichStmt>
<whichStmt> <lvalueIDStmt>
<whichStmt> <lvalueARRStmt>
<lvalueIDStmt> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> SQBO <element_index_with_expressions> SQBC ASSIGNOP <expression> SEMICOL
<index_arr> <sign> <new_index>
<new_index> NUM
<new_index> ID
<sign> PLUS
<sign> MINUS
<sign> EPS
<moduleReuseStmt> <optional> USE MODULE ID WITH PARAMETERS <actual_para_list> SEMICOL
<actual_para_list> <K> <N_12>
<actual_para_list> <sign> <K> <N_12>
<N_12> COMMA <sign> <K> <N_12>
<N_12> EPS
<K> NUM
<K> RNUM
<K> <boolConstt>
<K> ID <N_11>
<optional> SQBO <idList> SQBC ASSIGNOP
<optional> EPS
<idList> ID <N3>
<N3> COMMA ID <N3>
<N3> EPS

Ansh
<expression> <arithmeticOrBooleanExpr>
<expression> <U>
<U> <unary_op> <new_NT>
<new_NT> BO <arithmeticExpr> BC
<new_NT> <var_id_num>
<unary_op> PLUS 
<unary_op> MINUS
<var_id_num> ID
<var_id_num> NUM
<var_id_num> RNUM
<arithmeticOrBooleanExpr> <AnyTerm> <N7>
<N7> <logicalOp> <AnyTerm> <N7>
<N7> EPS
<AnyTerm> <arithmeticExpr> <N8>
<AnyTerm> <boolConstt>
<N8> <relationalOp> <arithmeticExpr>
<N8> EPS
<arithmeticExpr> <term> <N4>
<N4> <op1> <term> <N4>
<N4> EPS
<term> <factor> <N5>
<N5> <op2> <factor> <N5>
<N5> EPS
<factor> BO <arithmeticOrBooleanExpr> BC
<factor> NUM
<factor> RNUM
<factor> <boolConstt>
<factor> ID <N_11>
<N_11> SQBO <element_index_with_expressions> SQBC
<N_11> EPS
<element_index_with_expressions> <sign> <N_10>
<element_index_with_expressions> <arrExpr>
<N_10> <new_index>
<N_10> BO <arrExpr> BC
<arrExpr> <arrTerm> <arr_N4>
<arr_N4> <op1> <arrTerm> <arr_N4>
<arr_N4> EPS
<arrTerm> <arrFactor> <arr_N5>
<arr_N5> <op2> <arrFactor> <arr_N5>
<arr_N5> EPS
<arrFactor> ID
<arrFactor> BO <arrExpr> BC
<arrFactor> <boolConstt>
<arrFactor> NUM
<op1> PLUS
<op1> MINUS
<op2> MUL
<op2> DIV
<logicalOp> AND
<logicalOp> OR
<relationalOp> LT
<relationalOp> LE
<relationalOp> GT
<relationalOp> GE
<relationalOp> EQ
<relationalOp> NE

Shreekar
<declareStmt> DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt> SWITCH BO ID BC START <caseStmts> <_default> END
<caseStmts> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> CASE <value> COLON <statements> BREAK SEMICOL <N9>
<N9> EPS
<value> NUM
<value> TRUE
<value> FALSE
<_default> DEFAULT COLON <statements> BREAK SEMICOL
<_default> EPS
<iterativeStmt> FOR BO ID IN <range_for_loop> BC START <statements> END
<iterativeStmt> WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END
<range_for_loop> <index_for_loop> RANGEOP <index_for_loop>
<index_for_loop> <sign_for_loop> <new_index_for_loop>
<new_index_for_loop> NUM
<sign_for_loop> PLUS
<sign_for_loop> MINUS
<sign_for_loop> EPS

<assignmentStmt>
<conditionalStmt>
<iterativeStmt>
<ioStmt>
<moduleReuseStmt>
<declareStmt>
<module>
